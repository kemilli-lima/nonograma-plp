{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
{-# HLINT ignore "Use zipWithM_" #-}
{-# HLINT ignore "Use head" #-}
{-# HLINT ignore "Redundant return" #-}
{-|
Module      : Game.UI
Description : Implementa a interface do usu√°rio para o jogo.

Este m√≥dulo trata da exibi√ß√£o do tabuleiro, dicas, menus e navega√ß√£o do cursor.
Utiliza fun√ß√µes dos m√≥dulos Game.Logic, Game.SaveLoad e Game.Estrutura para atualizar e exibir
o estado do jogo, al√©m de fornecer op√ß√µes para salvar e interagir com o jogo atrav√©s do teclado.
-}
module Game.UI where

import Game.Logic
import Game.Estrutura
import Data.List (transpose, intersperse)
import Game.SaveLoad (saveGame)
import System.Console.ANSI
import System.IO
import Control.Monad (when)

-- | Largura fixa para formata√ß√£o das c√©lulas.
cellWidth :: Int
cellWidth = 2

{-|
Adiciona espa√ßos √† esquerda para alinhar uma string com base em um tamanho fixo.

@param n: N√∫mero total de caracteres desejado.
@param s: String original.
@return: String com espa√ßos adicionados √† esquerda at√© atingir o tamanho 'n'.
-}
padLeft :: Int -> String -> String
padLeft n s = replicate (n - length s) ' ' ++ s

{-|
Formata uma lista de dicas em uma √∫nica string.

@param maxSize: Tamanho m√°ximo para alinhamento.
@param hints: Lista de inteiros representando as dicas.
@return: String com as dicas formatadas e alinhadas.
-}
formatHints :: Int -> [Int] -> String
formatHints maxSize hints =
    let hintStrs = map (padLeft cellWidth . show) hints
        padding  = replicate (cellWidth * (maxSize - length hints)) ' '
    in padding ++ concat hintStrs

{-|
Alinha as dicas das colunas para exibi√ß√£o no cabe√ßalho do tabuleiro.

@param cols: Lista de listas de inteiros, onde cada sublista representa as dicas de uma coluna.
@return: Lista de strings, cada uma representando uma linha do cabe√ßalho alinhado.
-}
alignColHints :: [[Int]] -> [String]
alignColHints cols =
    let maxHintSize = maximum (map length cols)
        paddedCols = map (formatHints maxHintSize) cols
        splitCol :: String -> [String]
        splitCol [] = []
        splitCol s  = let (chunk, rest) = splitAt cellWidth s
                      in chunk : splitCol rest
        splitCols = map splitCol paddedCols
        headerRows = transpose splitCols
    in map concat headerRows

{-|
Renderiza uma c√©lula para exibi√ß√£o normal no tabuleiro.

@param cell: Valor do tipo 'Cell' a ser renderizado.
@return: String formatada representando a c√©lula.
-}
renderCell :: Cell -> String
renderCell Empty  = "\ESC[37m¬∑\ESC[0m "
renderCell Filled = "\ESC[32m‚ñ†\ESC[0m "
renderCell Marked = "\ESC[31mX\ESC[0m "

{-|
Renderiza a c√©lula selecionada com destaque (sublinhado).

@param cell: Valor do tipo 'Cell' que est√° selecionado.
@return: String formatada com destaque para a c√©lula selecionada.
-}
renderSelectedCell :: Cell -> String
renderSelectedCell cell =
    "\ESC[4m" ++ renderCell cell ++ "\ESC[0m "

{-|
Desenha a interface do jogo, exibindo vidas, dicas e o grid.

@param gameState: Estado atual do jogo.
@return: 'IO ()' ‚Äì Exibe a interface no terminal.
-}
drawUI :: GameState -> IO ()
drawUI gameState = do
    clearScreen
    setSGR [SetConsoleIntensity BoldIntensity]
    putStrLn $ "\ESC[31mVidas restantes: " ++ intersperse ' ' (replicate (lives gameState) '‚ù§') ++ "\ESC[0m"
    let gameData = game gameState
        current = currentGrid gameState
        maxRowHintSize = maximum (map length (rowsHints gameData))
        paddedRowHints = map (formatHints maxRowHintSize) (rowsHints gameData)
        colHintsAligned = alignColHints (colsHints gameData)
        leftMargin = replicate (cellWidth * maxRowHintSize + 2) ' '
        (selX, selY) = selectedCell gameState
    -- Exibe as dicas das colunas
    mapM_ (putStrLn . (leftMargin ++)) colHintsAligned
    -- Renderiza o grid com destaque na c√©lula selecionada
    let renderedRows = [ paddedRowHints !! i ++ " | " ++ concat [ if (i, j) == (selX, selY)
                                                                   then renderSelectedCell cell
                                                                   else renderCell cell
                                                                 | (j, cell) <- zip [0..] row ]
                       | (i, row) <- zip [0..] current ]
    mapM_ putStrLn renderedRows

{-|
Exibe o menu de op√ß√µes para o jogador na interface.

@return: 'IO ()' ‚Äì Exibe o menu principal no terminal.
-}
displayMenu :: IO ()
displayMenu = do
    setSGR [SetColor Foreground Vivid Cyan]
    putStrLn "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    putStrLn "‚ïë    üéÆ ESCOLHA UMA OP√á√ÉO üéÆ     ‚ïë"
    putStrLn "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
    
    setSGR [Reset]
    setSGR [SetColor Foreground Vivid Blue]
    putStrLn "‚ïë 1. ‚úèÔ∏è Marcar c√©lula (via WASD)  ‚ïë"
    setSGR [Reset]

    setSGR [SetColor Foreground Vivid Yellow]
    putStrLn "‚ïë 2. üí° Pedir dica               ‚ïë"
    setSGR [Reset]

    setSGR [SetColor Foreground Vivid Magenta]
    putStrLn "‚ïë 3. üö™ Sair                     ‚ïë"
    setSGR [Reset]

    setSGR [SetColor Foreground Vivid Green]
    putStrLn "‚ïë 4. üíæ Salvar jogo              ‚ïë"
    setSGR [Reset]

    setSGR [SetColor Foreground Vivid Cyan]
    putStrLn "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    setSGR [Reset]
    putStrLn ""

{-|
Loop de navega√ß√£o que permite ao jogador mover o cursor usando WASD e selecionar uma c√©lula com Enter.

@param gameState: Estado atual do jogo.
@return: 'IO GameState' ‚Äì Retorna o estado atualizado com a nova posi√ß√£o do cursor.
-}
navigationLoop :: GameState -> IO GameState
navigationLoop gameState = do
    drawUI gameState
    putStrLn "\ESC[36mUse WASD para mover o cursor, Enter para selecionar a c√©lula.\ESC[0m"
    hSetBuffering stdin NoBuffering
    hSetEcho stdin False
    key <- getChar
    hSetBuffering stdin LineBuffering
    hSetEcho stdin True
    let (x, y) = selectedCell gameState
        grid = currentGrid gameState
        numRows = length grid
        numCols = length (head grid)
        newPos = case key of
                    'w' -> (max 0 (x - 1), y)
                    's' -> (min (numRows - 1) (x + 1), y)
                    'a' -> (x, max 0 (y - 1))
                    'd' -> (x, min (numCols - 1) (y + 1))
                    _   -> (x, y)
        updatedState = gameState { selectedCell = newPos }
    if key == '\n'
       then return gameState  -- Retorna o estado com o cursor na posi√ß√£o confirmada.
       else navigationLoop updatedState

{-|
Ativa o modo de navega√ß√£o para que o jogador selecione uma c√©lula para marcar.

Caso a c√©lula selecionada j√° esteja preenchida, solicita uma nova sele√ß√£o.
Ap√≥s a escolha, permite ao jogador definir o tipo de marca√ß√£o (Filled ou Marked) e atualiza o estado.

@param gameState: Estado atual do jogo.
@return: 'IO GameState' ‚Äì Retorna o estado do jogo ap√≥s a marca√ß√£o.
-}
navigateAndMark :: GameState -> IO GameState
navigateAndMark gameState = do
    putStrLn "\ESC[36mNavega√ß√£o ativada: mova o cursor para selecionar a c√©lula.\ESC[0m"
    newState <- navigationLoop gameState
    let (selX, selY) = selectedCell newState
        cell = (currentGrid newState) !! selX !! selY
    if cell /= Empty then do
       putStrLn "\ESC[31mEsta c√©lula j√° est√° pintada. Selecione outra c√©lula.\ESC[0m"
       hFlush stdout
       putStrLn "Pressione ENTER para continuar..."
       _ <- getLine
       navigateAndMark newState
    else do
       putStrLn "\nDigite o tipo de marca√ß√£o para a c√©lula selecionada (1 para preenchida, 2 para marcada n√£o-colorida):"
       markType <- getLine
       let cellValue = if markType == "1" then Filled else Marked
       updatedGameState <- updateCellWithCheck newState (selX, selY) cellValue
       if lives updatedGameState < lives newState then
           putStrLn $ "Vidas restantes: " ++ show (lives updatedGameState)
       else
           putStrLn "Jogada correta!"
       hFlush stdout
       putStrLn "Pressione ENTER para continuar..."
       _ <- getLine
       return updatedGameState

{-|
Solicita uma dica para o jogador, chamando a fun√ß√£o 'giveHint' para corrigir uma c√©lula.

@param gameState: Estado atual do jogo.
@return: 'IO GameState' ‚Äì Retorna o estado do jogo ap√≥s fornecer a dica.
-}
requestHint :: GameState -> IO GameState
requestHint gameState = do
    newGameState <- giveHint gameState
    return newGameState

{-|
Realiza o salvamento do jogo solicitando o nome do arquivo onde o estado ser√° salvo.

@param gs: Estado atual do jogo.
@return: 'IO GameState' ‚Äì Retorna o mesmo estado ap√≥s a opera√ß√£o de salvamento.
-}
saveGamePrompt :: GameState -> IO GameState
saveGamePrompt gs = do
    putStrLn "Digite o nome do save (ex.: save.json):"
    name <- getLine
    result <- saveGame name gs
    case result of
        Left err -> putStrLn ("Erro ao salvar: " ++ err) >> return gs
        Right _  -> putStrLn "Jogo salvo com sucesso!" >> return gs

{-|
Loop principal do jogo, gerenciando a execu√ß√£o com base nas a√ß√µes do jogador.

Verifica condi√ß√µes de vit√≥ria e game over, exibe os menus e processa as escolhas do usu√°rio.

@param gameState: Estado atual do jogo.
@return: 'IO ()' ‚Äì Executa o loop principal at√© que o jogador saia ou o jogo termine.
-}
playGame :: GameState -> IO ()
playGame gameState = do
    drawUI gameState  -- Exibe o grid.
    if checkVictory gameState
       then do
           setSGR [SetColor Foreground Vivid Green]
           setSGR [SetConsoleIntensity BoldIntensity]
           putStrLn "Parab√©ns! Voc√™ venceu o jogo! üéâ"
           setSGR [Reset]
       else if isGameOver gameState
           then do
               setSGR [SetColor Foreground Vivid Red]
               setSGR [SetConsoleIntensity BoldIntensity]
               putStrLn "üíÄ Game Over! Voc√™ perdeu todas as vidas. Tente novamente! üíÄ"
               setSGR [Reset]
           else do
              displayMenu
              putStrLn "\ESC[36mEscolha uma op√ß√£o: \ESC[0m"
              choice <- getUserChoice
              case choice of
                  1 -> do
                      newGameState <- navigateAndMark gameState
                      playGame newGameState
                  2 -> do
                      newGameState <- requestHint gameState
                      playGame newGameState
                  3 -> putStrLn "Saindo do jogo..."
                  4 -> do
                      newGameState <- saveGamePrompt gameState
                      playGame newGameState
                  _ -> do
                      putStrLn "Op√ß√£o inv√°lida. Tente novamente."
                      playGame gameState

{-|
Captura e valida a escolha do usu√°rio a partir do menu.

L√™ a entrada e verifica se √© um n√∫mero v√°lido entre 1 e 4.

@return: 'IO Int' ‚Äì Retorna a op√ß√£o escolhida pelo usu√°rio.
-}
getUserChoice :: IO Int
getUserChoice = do
    setSGR [SetColor Foreground Vivid Cyan]
    putStr "\ESC[36m‚ñ∂ \ESC[36mOp√ß√£o: \ESC[0m"
    input <- getLine
    let parsed = reads input :: [(Int, String)]
    case parsed of
        [(n, "")] | n >= 1 && n <= 4 -> return n
        _ -> do
            putStrLn "\ESC[31m‚ùå  Op√ß√£o inv√°lida! Tente novamente.\ESC[0m"
            getUserChoice

{-|
Inicia o jogo utilizando a estrutura 'Game' e o nome do jogador.

Cria o estado inicial a partir da fun√ß√£o 'initGame' e inicia o loop de jogo com 'playGame'.

@param game: Estrutura est√°tica do jogo.
@param name: Nome do jogador.
@return: 'IO ()' ‚Äì Inicia o jogo.
-}
startGame :: Game -> String -> IO ()
startGame game name = do
    let initialState = initGame game
    playGame initialState
